<div class="container">

  <div class="row-fluid">
    <div class="well">
      <h1>Projects</h1>
      <p>
	Projects completed in COSC 462 are detailed below. A brief
	discussion of the programming and algorithms used for each
	project are discussed below. Plotting is used extensively to investigate the results found for each project. For further information about projects I pursue through work, spare time, and other classes please visit my 
	<a href="http://blog.chrisostrouchov.com">blog</a>.
      </p>
    </div>
  </div>

  <div class="row-fluid">

    <div class="col-md-3">
      <div class="navbar navbar-inverse" ng-controller="sidebarController">
	<div class="container">

	  <ul class="nav navbar-nav">
	    <li>
	      <a ng-click="scrollTo('program-1')">
		Program 1 <i class="icon-arrow-right"></i></a>
	    </li>
	    <li>
	      <a ng-click="scrollTo('program-2')">
		Program 2 <i class="icon-arrow-right"></i></a>
	    </li>
	    <li>
	      <a ng-click="scrollTo('program-3')">
		Program 3 <i class="icon-arrow-right"></i></a>
	    </li>
	    <li>
	      <a ng-click="scrollTo('program-4')">
		Program 4 <i class="icon-arrow-right"></i></a>
	    </li>
	    <li>
	      <a ng-click="scrollTo('program-5/6')">
		Program 5 <i class="icon-arrow-right"></i></a>
	    </li>
	    <li>
	      <a ng-click="scrollTo('program-5/6')">
		Program 6 <i class="icon-arrow-right"></i></a>
	    </li>
	  </ul>
	</div>
      </div>
    </div>
    
    <div id="content" class="col-md-9">
      <section id="program-1">
	<h2>Project 1
	  <div class="btn-group pull-right">
	    <a class="btn btn-small" href="../../parallelProg01/">Source</a>
	    <a class="btn btn-small" href="../../parallelProg01/parallelProg01.tgz">Tar File</a>
	  </div>
	</h2>

	<p>
	  In this assignment we were required to write a program that
	  would read numbers from a given text file. For each number
	  read, the program would do a fake computation
	  taking <code>computeEffort</code> time. From this program we
	  collected timing data on files with 1, 2, 4, 8, 16, 32, 64,
	  128, 256, and 512 numbers.
	</p>
	<br>
	<h3>compute.h</h3> 
	<div ng-controller="textEditorController">
	  <div ui-ace="{useWrapMode: true, showGutter: true, theme:'twilight', mode: 'c_cpp'}" readonly="true">#include &lt;time.h&gt;

 void Compute ( float effort )
 {
   struct timespec rqtp;
   struct timespec rmtp;

   rqtp.tv_sec  = (long) effort;
   rqtp.tv_nsec = (effort - ((long) effort) ) * 1000000000 ;

   nanosleep(&rqtp, &rmtp);
 }</div>
	 </div>

	 <p>
	   We can see from the file compute.h that <code>effort</code>
	   determines the amount of time that the
	   function <code>Compute(float effort)</code> waits. This is
	   accomplished using a function <code>nanosleep()</code>
	   provided in time.h.
	 </p>

	 <h3>readNumbers.c</h3>

	 <div ng-conroller="textEditorController">
	   <div ui-ace="{useWrapMode: true, showGutter: true, theme:'twilight', mode: 'c_cpp'}" readonly="true">#include "compute.h"

#include &lt;stdio.h&gt;

void ReadNumberFile(char *filename, float effort)
{
  FILE *inputfile;

  /* Read from inputfile */
  /* printf ( "Opening file %s \n", filename); */

  inputfile = fopen (filename, "r" );
  
  if ( inputfile != NULL)
    {
      printf("Reading from %s...\n", filename);

      int randomNumber;
      
      while (fscanf(inputfile, "%d", &randomNumber) == 1)
	   {
	     /* We supposedly do something with randomNumber */
	     Compute(effort);
	   }
      
      fclose ( inputfile );
    }
  else
    {
      fprintf (stderr, "Could not open inputfile = %s (pointer %ld) \n", filename, (long) inputfile);
      return;
    }
}
</div>
	 </div>

	 <p>
	   This file opens a file with given
	   name <code>filename</code>. All the proper file opening and
	   closing is preformed. Of interest is line 20. In the while
	   loop we can see that for each number read in it calls the
	   previously discussed <code>Compute(effort)</code>.
	 </p>

	 <h2>Results/Discussion</h2>

	 <h3>Figure 1</h3>
	 <figure>
	   <center>
	     <img src="../../parallelProg01/plots/timing.png"  class="img-responsive">
	     <figcaption>		
	       Program readNumbers was run on text files with 1, 2, 4 , 8, 16, 32,
	       64, 128, 256, 512 numbers.
	     </figcaption>
	   </center>
	 </figure>

	<p>
	  Looking at Figure 1 we can see a very apparent linear
	  relationship between our data points. As the number of
	  numbers read in doubles the time appears to double as
	  well. This agrees with the algorithm that we have set
	  up in readNumbers.c . Since the program waits a constant
	  time <code>effort</code>, analysis of algorithms tells
	  us that the code should take O(N) time.
	</p>

      </section>
      
      <section id="program-2">
	<h2>Program 2
	  <div class="btn-group pull-right">
	    <a class="btn btn-small" href="../../parallelProg02/">Source</a>
	    <a class="btn btn-small" href="../../parallelProg02/parallelProg01.tgz">Tar File</a>
	  </div>
	</h2>
	
	<p>
	  A program was written to generate n particles in a 2D space
	  and calculate statistics on those particles based on their
	  location. The statistics calculated on the particles include
	  the mean and variance of the positions, the distances
	  between two particles, and the inverse square distances
	  between two particles. The program takes three arguments as
	  input. <code>numParticles</code> determines the number of
	  particles to generate and calculate statistics
	  on. <code>shape</code> determines the container that the
	  particles need to fit within. It is required that the shape
	  be either a square or disk. Finally <code>radius</code>
	  determines the radius of the disk or half the side length
	  of the square.
	</p>
	
	<h3>ParseFlags.c</h3>

	<h3>particle.c</h3>

	<h3>statistics.c</h3>

	<h3>Helper Scripts</h3>
	
	<figure>
	  <center>
	    <img src="../../parallelProg02/plots/timing.png"  class="img-responsive">
	    <figcaption>
	      This plot show the amount of time that it takes for a
	      particle generation and statistics program to generate n
	      particles and calculate the means and variances of the
	      positions, distances, and inverse square distances.
	      This calculation is expected to be O(N^2).
	    </figcaption>
	  </center>
	</figure>
      </section>

      <section id="program-4">
	<h2>Program 4
	  <div class="btn-group pull-right">
	    <a class="btn btn-small" href="../../parallelProg04/code/">Source</a>
	    <a class="btn btn-small" href="../../parallelProg04/code/parallelProg01.tgz">Tar File</a>
	  </div>
	</h2>

	<p>
	  Since the default time program provided from terminals in not
	  completely accurate on the real user time that is taken to run
	  a program a new one was written.  It takes the difference in
	  time when a program starts. As can be seen in serial of the
	  plots bellow this in not the most accurate at times.
	</p>
	
	<figure>
	  <center>
	    <img src="../../parallelProg04/code/plots/timing.png"  class="img-responsive">
	    <figcaption>
	      This plot show the amount of time that it takes for a
	      particle generation and statistics program to generate
	      n particles and calculate the means and variances of
	      the positions, distances, and inverse square
	      distances.  This calculation is expected to be
	      O(N^2). It is bumpy due to the round off error in
	      timing. I am working to fix this error. This code was
	      run on the Newton cluster.
	    </figcaption>
	  </center>
	</figure>

	<figure>
	  <center>
	    <img src="../../parallelProg04/code/plots/timing1.png"  class="img-responsive">
	    <figcaption>
	      This plot show the amount of time that it takes for a
	      particle generation and statistics program to generate
	      n particles and calculate the means and variances of
	      the positions, distances, and inverse square
	      distances.  This calculation is expected to be
	      O(N^2). It is bumpy due to the round off error in
	      timing. I am working to fix this error. This code was
	      run on the custom cluster in the Min Kao building.
	    </figcaption>
	  </center>
	</figure>

	<a href="partials/notes.html">Notes</a> on how I set up the cluster in the Min Kao Building
	
      </section>

      <section id="program-5/6">
	<h2>Project 5 + 6</h2>
	In this project we were to time our code with p processes on n nodes. For these
	test we ran on 1 to 6 nodes. Each node has 2 cpus clocked at 2.8 GHz. Parameters
	that were used for timing the code were as follows:
	<br>
	numParticles 8000 <br>
	shape square <br>
	radius 1.0 <br>
	<p>
	  <a class="btn btn-small" href="../../parallelProg06/code/">Source</a>
	  <a class="btn btn-small" href="../../parallelProg06/code/parallelProg06.tgz">Tar File</a>
	</p>
	<figure>
	  <center>
	    <img src="../../parallelProg06/code/plots/timing_scatter.png"  class="img-responsive">
	    <figcaption>
	      This plot shows the run times for each process in p processes
	      run on n nodes. A least square polynomial of degree 1 was fit to each
	      plot. We can see as expected the slope (also the expected job run time)
	      decreases proportionally to the the number of nodes allocated. Also
	      the associated cost of running more processes than nodes can be interpreted
	      as the constant in each equation. This constant increases as the number of nodes
	      allocated increases.
	    </figcaption>
	  </center>
	</figure>

	<figure>
	  <center>
	    <img src="../../parallelProg06/code/plots/timing_max.png"  class="img-responsive">
	    <figcaption>
	      Similar to the previous plot we have plotted the maximum run time of all the processes.
	      In my runs this time is equal to the total run time. We can see that the least squares
	      fit for the data gets very similar results to the previous figure. From this plot we can
	      tell that each node has two cores by looking at the number of processes that must
	      ad		be allocated before the points break away from being constant.
	    </figcaption>
	  </center>
	</figure>

	<figure>
	  <center>
	    <img src="../../parallelProg06/code/plots/timing_compare.png" class="img-responsive" >
	    <figcaption>
	      The max run times for p processes on n nodes are plotted together with color separation
	      for the different number of nodes allocated.
	    </figcaption>
	  </center>
	</figure>
      </section>
    </div>
  </div>
</div>
